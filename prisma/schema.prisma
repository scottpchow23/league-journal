// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Summoner      Summoner[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Summoner {
  id                  String                       @id @default(cuid())
  name                String
  summonerLevel       Int
  profileIconId       Int
  accountId           String
  puuid               String
  user                User                         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String                       @unique
  matchParticipations SummonerMatchParticipation[]
}

model Match {
  id                     String                       @id
  summonerParticipations SummonerMatchParticipation[]
  participants           Participant[]
  dataVersion            String
  gameCreation           BigInt
  gameDuration           BigInt
  gameEndTimestamp       BigInt
  gameId                 BigInt
  gameMode               String
  gameName               String
  gameStartTimestamp     BigInt
  gameType               String
  gameVersion            String
  mapId                  Int
  platformId             String
  queueId                Int
  tournamentCode         String
}

model SummonerMatchParticipation {
  id            String      @id @default(cuid())
  match         Match       @relation(fields: [matchId], references: [id])
  matchId       String
  summoner      Summoner    @relation(fields: [summonerId], references: [id])
  summonerId    String
  participation Participant @relation(fields: [participantId], references: [id])
  participantId String

  @@unique([summonerId, matchId])
  @@unique([participantId, matchId])
}

model Participant {
  id                             String                       @id @default(cuid())
  SummonerMatchParticipation     SummonerMatchParticipation[]
  match                          Match                        @relation(fields: [matchId], references: [id])
  matchId                        String
  assists                        Int
  baronKills                     Int
  basicPings                     Int
  bountyLevel                    Int
  // challenges: Challenges;
  champExperience                Int
  champLevel                     Int
  championId                     Int
  championName                   String
  championTransform              Int
  consumablesPurchased           Int
  damageDealtToBuildings         Int
  damageDealtToObjectives        Int
  damageDealtToTurrets           Int
  damageSelfMitigated            Int
  deaths                         Int
  detectorWardsPlaced            Int
  doubleKills                    Int
  dragonKills                    Int
  eligibleForProgression         Boolean
  firstBloodAssist               Boolean
  firstBloodKill                 Boolean
  firstTowerAssist               Boolean
  firstTowerKill                 Boolean
  gameEndedInEarlySurrender      Boolean
  gameEndedInSurrender           Boolean
  goldEarned                     Int
  goldSpent                      Int
  individualPosition             String
  inhibitorKills                 Int
  inhibitorTakedowns             Int
  inhibitorsLost                 Int
  item0                          Int
  item1                          Int
  item2                          Int
  item3                          Int
  item4                          Int
  item5                          Int
  item6                          Int
  itemsPurchased                 Int
  killingSprees                  Int
  kills                          Int
  lane                           String
  largestCriticalStrike          Int
  largestKillingSpree            Int
  largestMultiKill               Int
  longestTimeSpentLiving         Int
  magicDamageDealt               Int
  magicDamageDealtToChampions    Int
  magicDamageTaken               Int
  neutralMinionsKilled           Int
  nexusKills                     Int
  nexusLost                      Int
  nexusTakedowns                 Int
  objectivesStolen               Int
  objectivesStolenAssists        Int
  // participantId               Int // I hate this
  pentaKills                     Int
  // perks: Perks;
  physicalDamageDealt            Int
  physicalDamageDealtToChampions Int
  physicalDamageTaken            Int
  profileIcon                    Int
  puuid                          String
  quadraKills                    Int
  riotIdName                     String
  riotIdTagline                  String
  role                           String
  sightWardsBoughtInGame         Int
  spell1Casts                    Int
  spell2Casts                    Int
  spell3Casts                    Int
  spell4Casts                    Int
  summoner1Casts                 Int
  summoner1Id                    Int
  summoner2Casts                 Int
  summoner2Id                    Int
  summonerId                     String
  summonerLevel                  Int
  summonerName                   String
  teamEarlySurrendered           Boolean
  teamId                         Int
  teamPosition                   String
  timeCCingOthers                Int
  timePlayed                     BigInt
  totalDamageDealt               Int
  totalDamageDealtToChampions    Int
  totalDamageShieldedOnTeammates Int
  totalDamageTaken               Int
  totalHeal                      Int
  totalHealsOnTeammates          Int
  totalMinionsKilled             Int
  totalTimeCCDealt               Int
  totalTimeSpentDead             Int
  totalUnitsHealed               Int
  tripleKills                    Int
  trueDamageDealt                Int
  trueDamageDealtToChampions     Int
  trueDamageTaken                Int
  turretKills                    Int
  turretTakedowns                Int
  turretsLost                    Int
  unrealKills                    Int
  visionScore                    Int
  visionWardsBoughtInGame        Int
  wardsKilled                    Int
  wardsPlaced                    Int
  win                            Boolean

  @@unique([matchId, puuid])
}
